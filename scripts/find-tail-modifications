#!/usr/bin/env Rscript

sys = modules::import('klmr/sys')

"Extract the first (non-A) tail modification (if any) and its length, and
writes the resulting table to the standard output"

sys$run({
    args = sys$cmd$parse(arg('taginfo', 'input taginfo file'))

    io = modules::import('ebi-predocs/ebits/io')
    modules::import_package('dplyr', attach = TRUE)

    taginfo = io$read_table(args$taginfo, header = TRUE, na.strings = '_') %>%
        mutate(Source = ifelse(grepl('ORV', Gene, fixed = TRUE), Gene, 'host'))

    # The first version of this used `rle`, but was much too slow and memory
    # intensive.
    modifications = function(seq) {
        first_length = function (str) {
            if (! nzchar(str))
                return(0L)

            first_char = substr(str, 1L, 1L)
            pos = 2L
            while (substr(str, pos, pos) == first_char) {
                pos = pos + 1L
            }
            pos - 1L
        }

        data_frame(ModLength = vapply(seq, first_length, integer(1)),
                   Mod = substr(seq, 1L, 1L))
    }

    # Previously, `N` tail modifications were converted to *no* tail
    # modifications but this is inaccurate: `N` marks the presence of an
    # unknown tail modification rather than its absence. Confounding these
    # values would skew the analysis. We thus now remove these uninterpretable
    # values.

    tailinfo = taginfo %>%
        do(modifications(.$Mod)) %>%
        bind_cols(select(taginfo, -Mod), .) %>%
        filter(Mod != 'N')

    io$write_table(tailinfo, stdout(), sep = '\t')
})

# vim: ft=r
